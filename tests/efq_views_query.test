<?php

/**
 * @file
 * Tests for EFQ Views query features.
 */

/**
 * Abstract class for EFQ views testing.
 */
abstract class EFQViewsTestCase extends DrupalWebTestCase {
  protected $entities = array();
  protected function setUp() {
    if (module_exists('mongodb')) {
       variable_set('field_storage_default', 'mongodb_field_storage');
       parent::setUp('mongodb_field_storage', 'efq_views_test');
    }
    else {
      parent::setUp('efq_views_test');
    }
    $field = array(
      'field_name' => 'field_boolean',
      'type' => 'list_boolean',
    );
    $field['settings']['allowed_values'] = array('Off', 'On');
    field_create_field($field);
    $instance = array (
      'field_name' => 'field_boolean',
      'entity_type' => 'efq_views_test',
      'bundle' => 'bundle1',
      'label' => 'field boolean',
    );
    field_create_instance($instance);
    // Load the test dataset.
    foreach ($this->entities as $key => $entity_array) {
      $entity = entity_create('efq_views_test', $entity_array);
      entity_save('efq_views_test', $entity);
      $this->assertFalse(empty($entity->eid), 'Entity saved');
      $this->entities[$key] = $entity;
    }
  }
  protected function view() {
    $view = new view();
    $view->base_table = 'efq_efq_views_test';
    /* Display: Master */
    $handler = $view->new_display('default');
    $handler->display->display_options['row_options']['default_field_elements'] = FALSE;
    /* Field: Entity: Entity ID */
    $handler->display->display_options['fields']['entity_id']['id'] = 'entity_id';
    $handler->display->display_options['fields']['entity_id']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['entity_id']['field'] = 'entity_id';

    /* Field: EFQ Views test: Efq views test ID */
    $handler->display->display_options['fields']['eid']['id'] = 'eid';
    $handler->display->display_options['fields']['eid']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['eid']['field'] = 'eid';
    /* Field: EFQ Views test: Language */
    $handler->display->display_options['fields']['language']['id'] = 'language';
    $handler->display->display_options['fields']['language']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['language']['field'] = 'language';
    /* Field: EFQ Views test: Test_boolean */
    $handler->display->display_options['fields']['test_boolean']['id'] = 'test_boolean';
    $handler->display->display_options['fields']['test_boolean']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_boolean']['field'] = 'test_boolean';
    /* Field: EFQ Views test: Test_date */
    $handler->display->display_options['fields']['test_date']['id'] = 'test_date';
    $handler->display->display_options['fields']['test_date']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_date']['field'] = 'test_date';
    /* Field: EFQ Views test: Test_decimal */
    $handler->display->display_options['fields']['test_decimal']['id'] = 'test_decimal';
    $handler->display->display_options['fields']['test_decimal']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_decimal']['field'] = 'test_decimal';
    /* Field: EFQ Views test: Test_duration */
    $handler->display->display_options['fields']['test_duration']['id'] = 'test_duration';
    $handler->display->display_options['fields']['test_duration']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_duration']['field'] = 'test_duration';
    /* Field: EFQ Views test: Test_integer */
    $handler->display->display_options['fields']['test_integer']['id'] = 'test_integer';
    $handler->display->display_options['fields']['test_integer']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_integer']['field'] = 'test_integer';
    /* Field: EFQ Views test: Test_text */
    $handler->display->display_options['fields']['test_text']['id'] = 'test_text';
    $handler->display->display_options['fields']['test_text']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['test_text']['field'] = 'test_text';
    /* Field: EFQ Views test: Uid */
    $handler->display->display_options['fields']['uid']['id'] = 'uid';
    $handler->display->display_options['fields']['uid']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['uid']['field'] = 'uid';
    /* Field: EFQ Views test: URL */
    $handler->display->display_options['fields']['url']['id'] = 'url';
    $handler->display->display_options['fields']['url']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['url']['field'] = 'url';
    /* Field: EFQ Views test: field boolean */
    $handler->display->display_options['fields']['field_boolean']['id'] = 'field_boolean';
    $handler->display->display_options['fields']['field_boolean']['table'] = 'efq_efq_views_test';
    $handler->display->display_options['fields']['field_boolean']['field'] = 'field_boolean';

    return $view;
  }

  protected function runView() {
    $view = $this->view();
    $content = $view->preview();
    $this->verbose($content);
    $this->drupalSetContent($content);
  }
}

class EFQViewsFieldTestCase extends EFQViewsTestCase {
  function getInfo() {
    return array(
      'name' => 'EFQ Views fields',
      'description' => 'Tests EFQ Views field handlers',
      'group' => 'EFQ Views',
    );
  }
  protected $entities = array(
    array(
      'bundle' => 'bundle1',
      'label' => 'test label 1',
      'uid' => 1,
      'test_boolean' => TRUE,
      'test_integer' => 15,
      'test_decimal' => 78,
      'test_duration' => 900,
      'test_date' => 1336236850,
      'test_text' => 'test text',
      'field_boolean' => array(LANGUAGE_NONE => array(array('value' => 1))),
    ),
  );

  function testBasic() {
    $this->runView();
    $entity = $this->entities[0];
    $this->assertPattern("/Entity ID: +$entity->eid/", 'Entity ID found');
    $this->assertPattern("/Efq views test ID: +$entity->eid/", 'Entity ID (meta) found');
    $this->assertPattern("/Test_boolean: +Yes/", 'Boolean found');
    $this->assertPattern('/Test_decimal: +' . ($entity->test_decimal / 100) . '/', 'Decimal found');
    $this->assertPattern('/Test_date: +' . preg_quote(format_date($entity->test_date), '/') . '/', 'Date found');
    $this->assertPattern('/Test_text: +test text/', 'Test text found');
    $url = url("custom/$entity->uid", array('absolute' => TRUE));
    $this->assertPattern('/URL: +' . preg_quote(l($url, $url), '/') . '/', 'URL found');
    $this->assertPattern('/field boolean: +On/', 'Boolean field API field found');
  }
}

class EFQViewsNodeLinkTestCase extends EFQViewsTestCase {
   function getInfo() {
    return array(
      'name' => 'EFQ Views node link',
      'description' => 'Tests EFQ Views sees a Views-defined special field.',
      'group' => 'EFQ Views',
    );
  }

  function view() {
    $view = new view();
    $view->base_table = 'efq_node';
    /* Display: Master */
    $handler = $view->new_display('default');
    /* Field: Node: Edit link */
    $handler->display->display_options['fields']['edit_node']['id'] = 'edit_node';
    $handler->display->display_options['fields']['edit_node']['table'] = 'views_entity_node';
    $handler->display->display_options['fields']['edit_node']['field'] = 'edit_node';
    return $view;
  }

  function testNodeLink() {
    $node = $this->drupalCreateNode();
    $account = $this->drupalCreateUser(array('bypass node access'));
    $this->drupalLogin($account);
    $this->runView();
    $this->assertRaw('Edit link:');
    $this->clickLink('edit');
    $this->assertFieldByName('title', $node->title);
  }
}
