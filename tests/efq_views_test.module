<?php

/**
 * @file
 * Provides info about the efq_views test entity.
 */

/**
 * Implements hook_entity_info().
 */
function efq_views_test_entity_info() {
  $info = array(
    'efq_views_test' => array(
      'label' => t('EFQ Views test'),
      'base table' => 'efq_views_test',
      'entity class' => 'EFQViewsTestEntityClass',
      'controller class' => 'EntityAPIController',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'load hook' => 'example_task_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'bundle' => 'bundle',
        'label' => 'label',
      ),
      'bundle keys' => array(
        'bundle' => 'bundle',
      ),
      'bundles' => array(),
    ),
  );
  $info['efq_views_test']['bundles']['bundle1']['label'] = t('Bundle 1');
  $info['efq_views_test']['bundles']['bundle2']['label'] = t('Bundle 2');
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function efq_views_test_entity_property_info_alter(&$info) {
  $properties['language'] = array(
    'label' => t("Language"),
    'type' => 'token',
    'description' => t("The language the entity."),
    'setter callback' => 'entity_property_verbatim_set',
    'options list' => 'entity_metadata_language_list',
    'schema field' => 'language',
  );
  $properties['author'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the entity."),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['test_boolean'] = array(
    'label' => t("Test boolean"),
    'description' => t("A test boolean."),
    // Although the status is expected to be boolean, its schema suggests
    // it is an integer, so we follow the schema definition.
    'type' => 'boolean',
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'test_boolean',
  );
  $properties['test_integer'] = array(
    'label' => t("A test integer"),
    'type' => 'integer',
    'description' => t("A test integer."),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'test_integer',
  );
  $properties['test_decimal'] = array(
    'label' => t("A test decimal"),
    'description' => t("A test decimal."),
    'getter callback' => 'efq_views_test_decimal',
    'type' => 'decimal',
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'test_decimal',
  );
  $properties['test_duration'] = array(
    'label' => t('A duration propery'),
    'description' => t('A duration property'),
    'type' => 'duration',
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'test_duration',
  );
  $properties['test_date'] = array(
    'label' => t("Test date"),
    'type' => 'date',
    'description' => t("The date of the entity."),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'test_date',
  );
}

function efq_views_test_bundles() {
  return array('test1', 'test2');
}

function efq_views_test_decimal($entity, array $options, $name) {
  return $entity->test_decimal / 100;
}

class EFQViewsTestEntityClass extends Entity {
  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, 'efq_views_test');
  }

  /**
   * Override buildContent() to add the username to the output.
   */
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content['user'] = array(
      '#markup' => "User: ". format_username(user_load($this->uid)),
    );
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }

  /**
   * Specifies the default label, which is picked up by label() by default.
   */
  protected function defaultLabel() {
    $type = entity_test_get_types($this->name);
    return $type->label;
  }

  /**
   * Specifies the default uri, which is picked up by uri() by default.
   */
  protected function defaultURI() {
    return array('path' => 'custom/' . $this->identifier());
  }
}
